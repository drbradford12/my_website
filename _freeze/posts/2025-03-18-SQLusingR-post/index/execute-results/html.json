{
  "hash": "144e997f7979dbdc8859652cff185803",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using RStudio (Posit) as an IDE to automate data pulls to a Database\"\ndescription: \"Learning to use RStudio as an IDE\"\nauthor:\n  - name: Denise Bradford\n    url: https://drbradford12.github.io/my_website\n    orcid: 0000-0002-9267-105X\n    affiliation: PhD of Statistics @ University of Nebraska-Lincoln (UNL)\n    affiliation-url: https://statistics.unl.edu/ \ndate: 2025-03-18\ncategories: [RMySQL, R, DBI, keyring, ETL] # self-defined categories\ncitation: \n  url: https://drbradford12.github.io/my_website/posts/2025-03-18-SQLusingR-post/\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\nWhile early in my doctoral program, I wanted to learn more about orchestrating data to a database. This interest started while I was a Data Analyst intern at Hudl. I learned a great deal of best practices about SQL but I knew much more about cleaning data in R. My advisor, Dr. Susan VanderPlas, took the time to setup an environment on her local server. You will see here in this example on our shared GitHub Repo our work for an NSF Grant for Rural Shrink Smart in small towns in Iowa.\n\nThis [GitHub link](https://github.com/Shrink-Smart-Data-Science/Data-Sources/blob/master/App%20Data%20Prep/Database%20call.R) is an R script titled **\"Database call.R\"**, which outlines the process of preparing application data for analysis. \n\n\nDatabase Connection through RStudio remotely: by connecting to a MySQL database, enabling efficient data retrieval and storage using credentials securely accessed through `keyring`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(lubridate)\nlibrary(RMySQL)\nlibrary(DBI)\nlibrary(keyring)\nlibrary(pool)\n\n# --- Initial Setup ------------------------------------------------------------\npool <- pool::dbPool(\n  drv = RMySQL::MySQL(),\n  dbname = \"scc\",\n  host = \"srvanderplas.com\",\n  username = \"remote\",\n  password = keyring::key_get(\"MY_SECRET\")\n)\n```\n:::\n\n\n\n\nFor the sake of the topic of the post, I will summarize the cleaning steps, in which you are encouraged to look at the link to the GitHub Repo above.\n\n> The script systematically cleans and standardizes various datasets across geographic and administrative levels (county, city, school district). It prepares county identifiers and processes individual datasets like childcare providers, fire departments, hospitals, retirement homes, and assisted living facilities, extracting essential variables and geographic coordinates. It also summarizes city-level population data, thoroughly cleans county-level datasets related to social services (child welfare, TANF, Medicaid), economic indicators (sales tax, unemployment insurance), and assessed property values. Finally, the script organizes detailed school-district data, categorizing schools by type and calculating distances from city centers, while also summarizing school district financial information.\n\n\nLastly, cleaned data frames are systematically written back into the MySQL database, replacing previous versions to ensure updated, tidy, and ready-to-use data sources for downstream analyses.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data_sources <- tibble::tribble(\n  ~name, ~data.frame.name,\n  \"assisted_living_clean\", assisted_living_clean,\n  \"assessed_property_values_clean\", assessed_property_values_clean,\n  \"child_abuse_county_clean\", child_abuse_county_clean,\n  \"child_abuse_county_age_group_clean\", child_abuse_county_age_group_clean,\n  \"child_care_registered_clean\", child_care_registered_clean,\n  \"child_welfare_assessments_clean\", child_welfare_assessments_clean,\n  \"ems_clean\", ems_clean,\n  \"fips_data_clean\", fips_data_clean,\n  \"fire_dept_clean\", fire_dept_clean,\n  \"food_stamps_county_clean\", food_stamps_county_clean,\n  \"hospitals_clean\", hospitals_clean,\n  \"medicaid_payments_county_clean\", medicaid_payments_county_clean,\n  \"physical_and_cultural_geographic_features_clean\", physical_cultural_geographic_features_clean,\n  \"retirement_homes_clean\", retirement_homes_clean,\n  \"sales_tax_clean\", sales_tax_clean,\n  \"school_revenue_year_clean\", school_revenue_year_clean,\n  \"schools_clean\", schools_clean,\n  \"tanf_county_clean\", tanf_county_clean,\n  \"unemployment_insurance_payments_clean\", unemployment_insurance_payments_clean\n)\n\n\nfor (i in seq_along(clean_data_sources$name)){\n\n  dbWriteTable(conn = pool,\n               name = clean_data_sources$name[[i]],\n               value = clean_data_sources$data.frame.name[[i]],\n               row.names=FALSE,\n               overwrite = TRUE) \n}\n```\n:::\n\n\n\nThrough this process, I learned how to systematically prepare and clean diverse datasets by standardizing column names, removing unnecessary variables, and securely managing database connections. I gained practical experience in extracting and formatting geographic coordinates, as well as aggregating data at various administrative scalesâ€”ranging from individual-level facilities to city, county, and school-district summaries. Additionally, I developed a clear understanding of structuring complex spatial and social datasets into organized, analysis-ready formats.\n\nThis initial task became the start of a love for the ETL (Extract, Transform and Load) process using cloud infrastructure (like Databricks and AWS) and Python.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}